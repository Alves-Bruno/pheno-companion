# -*- coding: utf-8 -*-
# -*- mode: org -*-

#+TITLE: Companion Scripts
#+AUTHOR: Bruno Alves et al.

#+STARTUP: overview indent

* Scripts
:PROPERTIES:
:header-args: :session :tangle-mode (identity #o755)
:END:

This directory contains all the scripts needed to reproduce the
Figures shown in the paper *Measuring Phenology Uncertainty with Large
Scale Image Processing*. For all the scripts below, you may want to
customize the path to ~Rscript~.

** Figures Overview


| Section | Figure Number | Figure                               | Description | Script path           |
|---------+---------------+--------------------------------------+-------------+-----------------------|
|       2 |             3 | [[./images/AHS-gcc-p90-together.jpg]]    |             | [[section-2/figure-3.R]]  |
|       2 |             4 | [[./images/GDK-gcc-p90-together.jpg]]    |             | [[section-2/figure-4.R]]  |
|       2 |             5 | [[./images/PEG-gcc-p90-together.jpg]]    |             | [[section-2/figure-5.R]]  |
|       2 |             6 | [[./images/space_conversion.pdf]]        |             | [[section-2/figure-6.R]]  |
|---------+---------------+--------------------------------------+-------------+-----------------------|
|       3 |             7 | [[./images/AHS-metrics-over-day.pdf]]    |             | [[section-3/figure-7.R]]  |
|       3 |             8 | [[./images/AHS-metrics-at-4.pdf]]        |             | [[section-3/figure-8.R]]  |
|       3 |             9 | [[./images/AHS-filters.png]]             |             | [[section-3/figure-9.R]]  |
|       3 |            10 | [[./images/GDK-filters.png]]             |             | [[section-3/figure-10.R]] |
|       3 |            11 | [[./images/PEG-filters.png]]             |             | [[section-3/figure-11.R]] |
|       3 |            12 | [[./images/AHS-color-map.png]]           |             | [[section-3/figure-12.R]] |
|       3 |            13 | [[./images/AHS-color-map-with-lstar.png]] |             | [[section-3/figure-13.R]] |
|       3 |            14 | [[./images/color-correction-distance.png]] |             | [[section-3/figure-14.R]] |
|       3 |            15 | [[./images/color-correction-colors.png]] |             | [[section-3/figure-15.R]] |
|       3 |            16 | [[./images/impacts-on-p90.png]]          |             | [[section-3/figure-16.R]] |
|---------+---------------+--------------------------------------+-------------+-----------------------|

** Section 2
*** Figure 3 ()

#+BEGIN_SRC R :tangle section-2/figure-3.R
#!/usr/bin/Rscript
# Load libs
options(crayon.enabled = FALSE)
library(tidyverse)
library(arrow)
library(patchwork)

p90_aggregation_simple <- function(df, window_size=5){

  df %>%
    arrange(Year, DOY) -> metrics.ordered

  df %>%
    select(Year, DOY) %>%
    distinct %>%
    arrange(Year, DOY) %>%
    slice(1:(tail(seq(1,n(), by=window_size), n=1)-1)) %>%
    mutate(order = rep(1:(n()/window_size), each=window_size)) -> df.center.order

  df %>%
    # Associate groups and filter out those pictures without a group
    left_join(df.center.order, by = c("Year", "DOY")) %>%
    filter(!is.na(order)) %>%
    group_by(order) %>%
    summarize(
        Year = min(Year),
        DOY = median(DOY), # this effectively gets the DOY in the center
        p90 = quantile(Gcc, probs=c(.90)), .groups="drop") %>%
    return()

}

# AHS
read_parquet("../data/AHS_metrics-all.parquet") %>%
  as_tibble() %>%
  select(
    Picture.Path,
    Gcc = Gcc_Bruna, 
    L_mean, A_mean, B_mean,
    r_mean, g_mean, b_mean,
    Year, DOY = Day, Hour, Minute, Dataset,
    Camera_ID, Mask.Path
  ) %>%
  filter(between(Year, 2010, 2016))  -> data.AHS

bind_rows(
  data.AHS %>%
    mutate(Dataset = paste(Dataset, Camera_ID, sep="\n")) %>%
    group_by(Dataset) %>%
    group_modify(~p90_aggregation_simple(.x)) %>% 
    mutate(gcc_type = "Gcc P90"),

  data.AHS %>%
    mutate(Dataset = paste(Dataset, Camera_ID, sep="\n")) %>%
    mutate(gcc_type = "Gcc")
) %>%
  ggplot() +
  geom_point(aes(x=DOY, y=Gcc, colour=gcc_type), alpha=0.05) +
  geom_point(aes(x=DOY, y=p90, colour=gcc_type)) +
  geom_line(aes(x=DOY, y=p90, colour=gcc_type)) +
  theme_bw(base_size=16) +
  theme(
    plot.margin = unit(c(0, 0, 0, 0), "cm"),
    legend.spacing = unit(1, "mm"),
    panel.grid = element_blank(),
    legend.position = "top",
    legend.justification = "left",
    legend.box.spacing = unit(0, "pt"),
    legend.box.margin = margin(0, 0, 0, 0),
    legend.title = element_blank()
  ) +
#  ylab("Gcc") +
  scale_color_manual(
    breaks = c("Gcc", "Gcc P90"), 
    values=c("black", "red")
  ) + 
  labs(
    y = "Gcc value",
    colour= "Gcc type"
  ) +
  facet_grid(Dataset~Year) -> p.ahs

ggsave(
  "AHS-gcc-p90-together.jpg",
  plot = p.ahs,
  path = "./images/",
#  scale = 1,
  width = 15,
  height = 4)


#+END_SRC
*** Figure 4 ()

#+BEGIN_SRC R :tangle section-2/figure-4.R
#!/usr/bin/Rscript
# Load libs
options(crayon.enabled = FALSE)
library(tidyverse)
library(arrow)
library(patchwork)

p90_aggregation_simple <- function(df, window_size=5){

  df %>%
    arrange(Year, DOY) -> metrics.ordered

  df %>%
    select(Year, DOY) %>%
    distinct %>%
    arrange(Year, DOY) %>%
    slice(1:(tail(seq(1,n(), by=window_size), n=1)-1)) %>%
    mutate(order = rep(1:(n()/window_size), each=window_size)) -> df.center.order

  df %>%
    # Associate groups and filter out those pictures without a group
    left_join(df.center.order, by = c("Year", "DOY")) %>%
    filter(!is.na(order)) %>%
    group_by(order) %>%
    summarize(
        Year = min(Year),
        DOY = median(DOY), # this effectively gets the DOY in the center
        p90 = quantile(Gcc, probs=c(.90)), .groups="drop") %>%
    return()

}

# GDK
read_parquet("../data/GDK_metrics-all.parquet") %>%
  as_tibble() %>%
  select(
    Gcc = Gcc_Bruna, 
    L_mean, A_mean, B_mean,
    r_mean, g_mean, b_mean,
    Year, DOY = Day, Hour, Minute, Dataset,
    Camera_ID, Mask.Path
  ) -> data.GDK


bind_rows(
  data.GDK %>%
    mutate(Dataset = paste(Dataset, Camera_ID, sep="\n")) %>%
    group_by(Dataset) %>%
    group_modify(~p90_aggregation_simple(.x)) %>%
    mutate(gcc_type = "Gcc P90"),

  data.GDK %>%
    mutate(Dataset = paste(Dataset, Camera_ID, sep="\n")) %>%
    mutate(gcc_type = "Gcc")

) %>%
 ggplot() +
  geom_point(aes(x=DOY, y=Gcc, colour=gcc_type), alpha=0.1) +
  geom_point(aes(x=DOY, y=p90, colour=gcc_type)) +
  geom_line(aes(x=DOY, y=p90, colour=gcc_type)) +
  theme_bw(base_size=24) +
  theme(
    plot.margin = unit(c(0, 0, 0, 0), "cm"),
    legend.spacing = unit(1, "mm"),
    panel.grid = element_blank(),
    legend.position = "top",
    legend.justification = "left",
    legend.box.spacing = unit(0, "pt"),
    legend.box.margin = margin(0, 0, 0, 0),
    legend.title = element_blank()
  ) +
#  ylab("Gcc") +
  scale_color_manual(
    breaks = c("Gcc", "Gcc P90"), 
    values=c("black", "red")
  ) + 
  labs(
    y = "Gcc value",
    colour= "Gcc type"
  ) +
  facet_grid(Dataset~Year) +
  scale_y_continuous(breaks=seq(0.2, 0.7, 0.2)) -> p.gdk

p.gdk

ggsave(
  "GDK-gcc-p90-together.jpg",
  plot = p.gdk,
  path = "./images/",
##  scale = 1,
  width = 7,
  height = 6)

#+END_SRC
*** Figure 5 ()

#+BEGIN_SRC R :tangle section-2/figure-5.R
#!/usr/bin/Rscript

options(crayon.enabled = FALSE)
library(tidyverse)
library(arrow)
library(patchwork)

p90_aggregation_simple <- function(df, window_size=5){

  df %>%
    arrange(Year, DOY) -> metrics.ordered

  df %>%
    select(Year, DOY) %>%
    distinct %>%
    arrange(Year, DOY) %>%
    slice(1:(tail(seq(1,n(), by=window_size), n=1)-1)) %>%
    mutate(order = rep(1:(n()/window_size), each=window_size)) -> df.center.order

  df %>%
    # Associate groups and filter out those pictures without a group
    left_join(df.center.order, by = c("Year", "DOY")) %>%
    filter(!is.na(order)) %>%
    group_by(order) %>%
    summarize(
        Year = min(Year),
        DOY = median(DOY), # this effectively gets the DOY in the center
        p90 = quantile(Gcc, probs=c(.90)), .groups="drop") %>%
    return()

}

# PEG
read_parquet("../data/dataset_PEG_stats_all_years.parquet") %>%
  as_tibble() %>%
  select(
    Gcc = Gcc_Bruna, 
    L_mean, A_mean, B_mean,
    r_mean, g_mean, b_mean,
    Year, DOY = Day, Hour, Minute = Seq, Dataset
  ) %>%
  mutate(Dataset = "PEG", Camera_ID="peg") -> data.PEG

bind_rows(

  data.PEG %>%
    group_by(Dataset) %>%
    group_modify(~p90_aggregation_simple(.x)) %>%
    mutate(gcc_type = "Gcc P90"),

  data.PEG %>%
    mutate(gcc_type = "Gcc")

) %>%
 ggplot() +
  geom_point(aes(x=DOY, y=Gcc, colour=gcc_type), alpha=0.1) +
  geom_point(aes(x=DOY, y=p90, colour=gcc_type)) +
  geom_line(aes(x=DOY, y=p90, colour=gcc_type)) +
  theme_bw(base_size=24) +
#  ylab("Gcc") +
  theme(
    plot.margin = unit(c(0, 0, 0, 0), "cm"),
    legend.spacing = unit(1, "mm"),
    panel.grid = element_blank(),
    legend.position = "top",
    legend.justification = "left",
    legend.box.spacing = unit(0, "pt"),
    legend.box.margin = margin(0, 0, 0, 0),
    legend.title = element_blank()
  ) +
  scale_color_manual(
    breaks = c("Gcc", "Gcc P90"), 
    values=c("black", "red")
  ) + 
  labs(
    y = "Gcc value",
    colour= "Gcc type"
  ) +
  facet_grid(Dataset~Year) +
  scale_x_continuous (breaks=seq(0, 365, 150)) -> p.peg

ggsave(
  "PEG-gcc-p90-together.jpg",
  plot = p.peg,
  path = "./images/",
##  scale = 1,
  width = 10,
  height = 3.5)
#+END_SRC

*** Figure 6 ()

#+BEGIN_SRC R :tangle section-2/figure-6.R
#!/usr/bin/Rscript

options(crayon.enabled = FALSE)
library(tidyverse)
library(arrow)
library(patchwork)

library(pracma)

library(reticulate)
reticulate::use_miniconda('r-reticulate')
# Steps to install reticulate 
# install.packages('reticulate')
# reticulate::install_miniconda()
# reticulate::conda_install('r-reticulate', 'python-kaleido')
# reticulate::conda_install('r-reticulate', 'plotly', channel = 'plotly')
# reticulate::use_miniconda('r-reticulate')

# Get input data
read_parquet("../data/AHS_metrics-all.parquet") %>%
  as_tibble() %>%
  select(
    Picture.Path,
    Gcc = Gcc_Bruna, 
    L_mean, A_mean, B_mean,
    r_mean, g_mean, b_mean,
    Year, DOY = Day, Hour, Minute, Dataset,
    Camera_ID, Mask.Path
  ) %>%
  filter(between(Year, 2010, 2016))  -> data.AHS

# Compute statistical values 
# Get the first 100 rows of data.AHS as an example
data.AHS %>% 
  select(x=L_mean, y=A_mean, z=B_mean) %>% 
  slice(100:200) -> data

vars <- c("x", "y", "z")
type <- "t"
level <- .5
segments <- 15

# https://en.wikipedia.org/wiki/Hotelling%27s_T-squared_distribution
# m and p
m <- nrow(data)
p <- 3

# Compute the covariance matrix and center
v <- MASS::cov.trob(data[,vars], nu = nrow(data))

# Shape and center
shape <- v$cov
center <- v$center

# Cholesky decompose
chol_decomp <- chol(shape)

# Compute radius
radius <- sqrt(stats::qf(level, p, m - p + 1) * (p*m)/(m-p+1))

radius.small <- sqrt(stats::qf(0.1, p, m - p + 1) * (p*m)/(m-p+1))
radius.medium <- sqrt(stats::qf(0.5, p, m - p + 1) * (p*m)/(m-p+1))
radius.big <- sqrt(stats::qf(0.9, p, m - p + 1) * (p*m)/(m-p+1))

# The go to X method, implements x = L^{-1}.(y-mu)
go_to_X <- function(point, mu, L){
  # I am not fully sure if inv(L) really does implement L^{-1}
  # It seems so "oui, oui, bien sûr, il faut faire inv(L)"
  # Change inv() to solve(), since solve() is in R default lib.
  L_inverse <- solve(L)
  x <- L_inverse %*% (point - mu)
  c(x)
}

# Do the thing
#df %>%
data %>%
  rowwise() %>%
  mutate(X = list(go_to_X(c(x, y, z), center, t(chol_decomp)))) %>%
  mutate(
    N.x = X[[1]],
    N.y = X[[2]],
    N.z = X[[3]]
  ) %>%
  ungroup() %>%
  select(-X) %>%
  print -> data.normal

# CREATE SPHERES 
# Compute a perfect sphere using code from 
# https://stackoverflow.com/questions/35821584/how-to-draw-ellipsoid-with-plotly
theta <- seq(-pi/2, pi/2, by=0.1)
phi <- seq(0, 2*pi, by=0.2)
mgrd <- meshgrid(phi, theta)
phi <- c(mgrd$X)
theta <-  c(mgrd$Y)

lapply(c(radius.small, radius.medium, radius.big), function(radius) {
    x <- cos(theta) * cos(phi) * radius #+ center[[1]]
    dim(x) <- NULL
    y <- cos(theta) * sin(phi) * radius #+ center[[2]] 
    dim(y) <- NULL
    z <- sin(theta) * radius #+ center[[3]]
    dim(z) <- NULL

    tibble (x = x,
            y = y,
            z = z,
            radius = radius)
}) %>%
    bind_rows %>%
    print -> df.sphere

# CREATE ELLIPSES
df.sphere %>%
    rowwise() %>%
    mutate(Z = list(center + c(t(chol_decomp) %*% matrix(c(x, y, z), ncol=1)))) %>%
    mutate(e.x = Z[[1]],
           e.y = Z[[2]],
           e.z = Z[[3]]) %>%
    select(-Z) %>%
    print -> df.ellipses

# PLOT POINTS
library(plotly)
library(htmlwidgets)

plot_ly() %>%
add_markers(data=data.normal,
        x=~x,
        y=~y, 
        z=~z,
        color=~type,
        marker = list(
          color='black',
          size=12, 
          line=list(color='black')            
        ),
        #name="in",
        type="scatter3d",
        size = 0.2) %>%
        layout(
           plot_bgcolor='white',
           paper_bgcolor='white',
           margin = list(autoexpand=FALSE, l=0, b=0, r=0, t=0, pad=0),
           scene = list(
             xaxis = list(
             #title = "l* mean"#,
             title = "L",
             titlefont = list(size = 30),
             gridwidth = 10,
             showticklabels = FALSE
             ),
             yaxis = list(
             title = "A",
             titlefont = list(size = 30),
             #title = "a mean"#,
             gridwidth = 10,
             showticklabels = FALSE
             ),
             zaxis = list(
             title = "B",
             titlefont = list(size = 30),
             #title = "b mean"#,
             gridwidth = 10,
             showticklabels = FALSE
             ), 
             camera = list(
             eye = list(x = -0.5, y = 2.3, z = 0.3),
             center = list(x = 0, y = 0, z = 0)#,
              #projection = list(type = "orthographic")
             )
           )
         ) -> points.plot 
#saveWidget(ellipse.plot, "ellipse.html", selfcontained = FALSE)
save_image(points.plot, scale=1, file = "./images/Y.png", dpi="retina")

# PLOT POINTS IN X
library(plotly)
library(htmlwidgets)

plot_ly() %>%
add_markers(data=data.normal,
        x=~N.x,
        y=~N.y, 
        z=~N.z,
        color=~type,
        marker = list(
          color='black',
          size=12, 
          line=list(color='black')            
        ),
        #name="in",
        type="scatter3d",
        size = 0.2) %>%
        layout(
           plot_bgcolor='white',
           paper_bgcolor='white',
           margin = list(autoexpand=FALSE, l=0, b=0, r=0, t=0, pad=0),
           scene = list(
             xaxis = list(
             #title = "l* mean"#,
             title = "L'",
             titlefont = list(size = 30),
             gridwidth = 10,
             showticklabels = FALSE
             ),
             yaxis = list(
             title = "A'",
             titlefont = list(size = 30),
             #title = "a mean"#,
             gridwidth = 10,
             showticklabels = FALSE
             ),
             zaxis = list(
             title = "B'",
             titlefont = list(size = 30),
             #title = "b mean"#,
             gridwidth = 10,
             showticklabels = FALSE
             ), 
             camera = list(
             eye = list(x = 2.1 , y = 0, z = 0.1),
             center = list(x = 0, y = 0, z = 0)#,
              #projection = list(type = "orthographic")
             )
           )
         ) -> points.X.plot 

save_image(points.X.plot, scale=1, file = "./images/X.png")

# PLOT SPHERE
df.sphere %>%
    select(radius) %>%
    unique %>%
    arrange(radius) %>%
    mutate(Order = 1:n()) -> df.order

df.sphere %>% left_join(df.order, by="radius") -> df.sphere2
df.order %>% pull(Order) -> list.order

lapply(list.order, function(my.order) {

    x      = df.sphere2 %>% filter(Order == my.order) %>% pull(x)
    y      = df.sphere2 %>% filter(Order == my.order) %>% pull(y)
    z      = df.sphere2 %>% filter(Order == my.order) %>% pull(z)

#    plot_ly(scene = paste0("scene", my.order)) %>%
    plot_ly() %>%
        add_trace(
            x = x,
            y = y,
            z = z,
color=~as.factor(my.order), 
            type = "mesh3d",
            opacity = 1, 
            alphahull=0) %>%
        add_markers(data=data.normal,
                    x=~N.x,
                    y=~N.y, 
                    z=~N.z,
                    marker = list(
                      color='red',
                      size=12, 
                      line=list(color='red')            
                    ),
                    type="scatter3d",
                    size = 0.2)  %>%
        layout(
           plot_bgcolor='white',
           paper_bgcolor='white',
           margin = list(autoexpand=FALSE, l=0, b=0, r=0, t=0, pad=0),
           scene = list(
             xaxis = list(
             #title = "l* mean"#,
             title = "L'",
             gridwidth = 10,
             titlefont = list(size = 30),
             showticklabels = FALSE
             ),
             yaxis = list(
             title = "A'",
             titlefont = list(size = 30),
             gridwidth = 10,
             #title = "a mean"#,
             showticklabels = FALSE
             ),
             zaxis = list(
             title = "B'",
             titlefont = list(size = 30),
             gridwidth = 10,
             #title = "b mean"#,
             showticklabels = FALSE
             ), 
             camera = list(
             eye = list(x = 1.9 , y = 0, z = 0.1 ),
             center = list(x = 0, y = 0, z = 0)#,
              #projection = list(type = "orthographic")
             )
           )
         )

}) -> plotly.plots

save_image(plotly.plots[[1]], scale=1, file = "./images/plotA.png")
save_image(plotly.plots[[2]], scale=1, file = "./images/plotB.png")
save_image(plotly.plots[[3]], scale=1, file = "./images/plotC.png")

## GGPLOT - FINAL PLOT 
library(ggimage)
#library(jpeg)

plot_theme <- theme(
    plot.margin = unit(c(0, 0, 0, 0), "cm"),
    axis.title.x=element_blank(),
    axis.text.x=element_blank(),
    axis.ticks.x=element_blank(),
    axis.title.y=element_blank(),
    axis.text.y=element_blank(),
    axis.ticks.y=element_blank(),
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank()
  )

tibble(
Picture.Path=c("./images/Y.png", "./images/X.png"),
#type = c("up"),
legend = c("CIELab Space (Y)", "Normalized Space (X)")
) %>%
  ggplot() +
  theme_bw(base_size=14) + 
  geom_image(aes(x=0, y=0, image = Picture.Path), size=1.35) + 
  plot_theme + 
  facet_wrap(~factor(legend, levels=c("CIELab Space (Y)", "Normalized Space (X)"))) -> p1

tibble(
Picture.Path=c("./images/plotA.png", "./images/plotB.png", "./images/plotC.png"),
#type = c("up"),
legend = c("Level = 0.1", "Level = 0.5", "Level = 0.9")
) %>%
  ggplot() +
  theme_bw(base_size=14) + 
  geom_image(aes(x=0, y=0, image = Picture.Path), size=1.27) + 
  plot_theme + 
  facet_wrap(~legend) -> p2

layout <- "
##AAAAAA##
BBBBBBBBBB
"

p <- (p1 / p2) + plot_layout(design = layout)
ggsave("./images/space_conversion.pdf", plot=p, width=6, height=4)
#+END_SRC

** Section 3
*** Figure 7 ()

#+BEGIN_SRC R :tangle section-3/figure-7.R
#!/usr/bin/Rscript

options(crayon.enabled = FALSE)
library(tidyverse)
library(arrow)
library(patchwork)

# AHS
read_parquet("../data/AHS_metrics-all.parquet") %>%
  as_tibble() %>%
  select(
    Picture.Path,
    Gcc = Gcc_Bruna, 
    L_mean, A_mean, B_mean,
    r_mean, g_mean, b_mean,
    Year, DOY = Day, Hour, Minute, Dataset,
    Camera_ID, Mask.Path
  ) %>%
  filter(between(Year, 2010, 2016))  -> data.AHS

data.AHS %>%
  filter(Year == 2011) -> data.AHS.bigger

data.AHS.bigger %>%
filter(Camera_ID == "f02_u") %>%
filter(Hour %in% c(04,05,12,13,19,20)) %>%
filter(Minute <= 20) %>%
      pivot_longer(
#        cols = c("Gcc", "L_mean", "A_mean", "B_mean"),
        cols = c("Gcc", "L_mean"),
        names_to = "Metric",
        values_to = "value",
      ) %>%
mutate(Hour = sprintf("%.2d:00", Hour)) %>%
mutate(Type = if_else(Metric == "Gcc", "Gcc", "L* mean")) -> to_plot

to_plot %>%
filter(Type == "Gcc") %>%
ggplot(aes(x=DOY, y=value)) +
#  geom_point(aes(colour = Metric), alpha=0.2) +
  geom_line(alpha=0.7) +
  theme_bw(base_size=16) +
#  facet_wrap(~Hour, ncol = 6)
  ylab("Gcc value") +  
  theme(
    legend.position = "top", 
     axis.title.x=element_blank(),
     axis.ticks.x=element_blank(),
     axis.text.x=element_blank(),
  ) +
  facet_grid(Type~Hour) -> p.a

to_plot %>%
filter(Type == "L* mean") %>%
ggplot(aes(x=DOY, y=value)) +
#  geom_point(aes(colour = Metric), alpha=0.2) +
  geom_line(alpha=0.7) +
  theme_bw(base_size=16) +
#  facet_wrap(~Hour, ncol = 6)
  ylab("L* value") +  
  theme(
    legend.position = "top", 
    plot.margin = unit(c(0,0,0,0), "cm"),
    strip.text.x = element_blank()
  ) +
  facet_grid(Type~Hour) -> p.b

p <- p.a / p.b 

ggsave(
  "AHS-metrics-over-day.pdf",
  plot = p,
  path = "./images/",
#  scale = 1,
  width = 12,
  height = 6)
#+END_SRC

*** Figure 8 ()

#+BEGIN_SRC R :tangle section-3/figure-8.R
#!/usr/bin/Rscript

options(crayon.enabled = FALSE)
library(tidyverse)
library(arrow)
library(patchwork)

highlight <- c(25, 87, 125, 201, 300)

# AHS
read_parquet("../data/AHS_metrics-all.parquet") %>%
  as_tibble() %>%
  select(
    Picture.Path,
    Gcc = Gcc_Bruna, 
    L_mean, A_mean, B_mean,
    r_mean, g_mean, b_mean,
    Year, DOY = Day, Hour, Minute, Dataset,
    Camera_ID, Mask.Path
  ) %>%
  filter(between(Year, 2010, 2016))  -> data.AHS

data.AHS %>%
  filter(Year == 2011) -> data.AHS.bigger

data.AHS.bigger %>%
filter(Camera_ID == "f02_u") %>%
filter(Hour == 05) %>%
filter(Minute <= 20) %>%
      pivot_longer(
        cols = c("Gcc", "L_mean", "A_mean", "B_mean"),
        names_to = "Metric",
        values_to = "value",
      ) %>%
mutate(Hour = sprintf("%.2d:00", Hour)) %>%
mutate(Type = if_else(Metric == "Gcc", "Gcc", "CIELab")) %>%
ggplot(aes(x=DOY, y=value)) +
#  geom_point(aes(colour = Metric), alpha=0.2) +
  geom_line(aes(colour = Metric), alpha=0.7) +
  theme_bw(base_size=16) +
#  facet_wrap(~Hour, ncol = 6)
  ylab("Metrics Values") +  
  theme(
    legend.position = "top", 
  ) + 
  scale_x_continuous(breaks=highlight, labels=highlight) +  
  facet_grid(rows=vars(Type), cols=vars(Hour), scales="free_y") -> plot

df.redLines <- tribble(~X, 25, 87, 125, 201, 300) %>% mutate(Y=1)

plot <- plot +
    geom_vline(data=df.redLines, aes(xintercept=X), alpha=.2, size=0.75, color="black")
##    geom_label(data=df.redLines, aes(x=X, y=-40, label = X), size=2.75)

plot 

ggsave(
  "AHS-metrics-at-4.pdf",
  plot = plot,
  path = "./images/",
#  scale = 1,
  width = 7,
  height = 5)

#+END_SRC

*** Figure 9 ()

#+BEGIN_SRC R :tangle section-3/figure-9.R
#!/usr/bin/Rscript

options(crayon.enabled = FALSE)
library(tidyverse)
library(arrow)
library(patchwork)

# AHS
read_parquet("../data/AHS_metrics-all.parquet") %>%
  as_tibble() %>%
  select(
    Picture.Path,
    Gcc = Gcc_Bruna, 
    L_mean, A_mean, B_mean,
    r_mean, g_mean, b_mean,
    Year, DOY = Day, Hour, Minute, Dataset,
    Camera_ID, Mask.Path
  ) %>%
  filter(between(Year, 2010, 2016))  -> data.AHS

data.AHS %>%
  filter(Year == 2011) -> data.AHS.bigger
 
bind_rows(
  data.AHS.bigger %>%
  mutate(type="Original"),

  data.AHS.bigger %>%
  filter(L_mean > 10) %>%
  mutate(type="L* Filter"),

  data.AHS.bigger %>%
  filter(between(Hour, 08, 15)) %>%
  mutate(type="Hour-based\nFilter")

) -> AHS.plot

AHS.plot %>%
  rowwise() %>%
  filter(
    (Camera_ID == "f02_u" && (Minute %in% c(20)) ) ||
    (Camera_ID == "t24_d" && (Minute %in% c( 0))  )
  ) %>%
  ungroup() -> AHS.plot 

AHS.plot %>%
  ggplot(aes(x=DOY, y=Gcc)) +
  geom_point(alpha=.2) +
  theme_bw(base_size=16) +
  theme(axis.title.x=element_blank()) +
  facet_grid(
    Camera_ID~factor(type, levels=c("Original", "L* Filter", "Hour-based\nFilter"))
  ) -> gcc

AHS.plot %>%
  left_join(
    AHS.plot %>% 
      group_by(Camera_ID, type) %>% 
      count(n()) %>% 
      select(number_of_images = n)
   ) -> AHS.plot

gcc +
  ylim(0.2, 0.8) + 
  geom_label( 
    data= AHS.plot %>% group_by(Camera_ID, type) %>% slice(1), 
    aes(x=320, y=0.75, label=number_of_images),
    label.padding = unit(0.08, "lines"),
    size = 3.5 
  ) -> gcc


r <- (AHS.plot$r_mean / 256)
g <- (AHS.plot$g_mean / 256)
b <- (AHS.plot$b_mean / 256)

AHS.plot %>%
  ggplot() +
  geom_tile(aes(x=DOY, y=Hour), fill=rgb(r, g, b), color=rgb(r, g, b)) + 
  theme_bw(base_size=16) +
  theme(legend.position = "none") +  
  facet_grid(
    Camera_ID~factor(type, levels=c("Original", "L* Filter", "Hour-based\nFilter"))
  ) -> map

p <- gcc / map

ggsave(
  "AHS-filters.png",
  plot = p,
  path = "./images/",
#  scale = 1,
  width = 6,
  height = 6)


#+END_SRC
*** Figure 10 ()

#+BEGIN_SRC R :tangle section-3/figure-10.R
#!/usr/bin/Rscript

options(crayon.enabled = FALSE)
library(tidyverse)
library(arrow)
library(patchwork)

# GDK
read_parquet("../data/GDK_metrics-all.parquet") %>%
  as_tibble() %>%
  select(
    Gcc = Gcc_Bruna, 
    L_mean, A_mean, B_mean,
    r_mean, g_mean, b_mean,
    Year, DOY = Day, Hour, Minute, Dataset,
    Camera_ID, Mask.Path
  ) -> data.GDK

data.GDK %>%
  filter(Year == 2009) -> data.GDK.bigger

bind_rows(

  data.GDK.bigger %>%
  mutate(type="Original"),

  data.GDK.bigger %>%
  filter(L_mean > 10) %>%
  mutate(type="L* Filter"),

  data.GDK.bigger %>%
  filter(between(Hour, 08, 16)) %>%
  mutate(type="Hour-based\nFilter")

) -> GDK.plot

GDK.plot %>%
  ggplot(aes(x=DOY, y=Gcc)) +
  geom_point(alpha=.2) +
  theme_bw(base_size=16) +
  theme(axis.title.x=element_blank()) +
  facet_grid(
    Camera_ID~factor(type, levels=c("Original", "L* Filter", "Hour-based\nFilter"))
  ) -> gcc

GDK.plot %>%
  left_join(
    GDK.plot %>% 
      group_by(Camera_ID, type) %>% 
      count(n()) %>% 
      select(number_of_images = n)
   ) -> GDK.plot

gcc +
#  ylim(0.2, 0.8) + 
  geom_label( 
    data= GDK.plot %>% group_by(Camera_ID, type) %>% slice(1), 
    aes(x=320, y=0.68, label=number_of_images),
    label.padding = unit(0.08, "lines"),
    size = 3.5 
  ) -> gcc

GDK.plot %>%
  rowwise() %>%
  filter(
    Minute %in% c(0)
  ) %>%
  ungroup() -> GDK.plot 

r <- (GDK.plot$r_mean / 256)
g <- (GDK.plot$g_mean / 256)
b <- (GDK.plot$b_mean / 256)

GDK.plot %>%
  ggplot() +
  geom_tile(aes(x=DOY, y=Hour), fill=rgb(r, g, b), color=rgb(r, g, b)) + 
  theme_bw(base_size=16) +
  theme(legend.position = "none") +  
  facet_grid(
    Camera_ID~factor(type, levels=c("Original", "L* Filter", "Hour-based\nFilter"))
  ) -> map

p <- gcc / map

ggsave(
  "GDK-filters.png",
  plot = p,
  path = "./images/",
#  scale = 1,
  width = 6,
  height = 7.5)

#+END_SRC

*** Figure 11 ()

#+BEGIN_SRC R :tangle section-3/figure-11.R
#!/usr/bin/Rscript

options(crayon.enabled = FALSE)
library(tidyverse)
library(arrow)
library(patchwork)

# PEG
read_parquet("../data/dataset_PEG_stats_all_years.parquet") %>%
  as_tibble() %>%
  select(
    Gcc = Gcc_Bruna, 
    L_mean, A_mean, B_mean,
    r_mean, g_mean, b_mean,
    Year, DOY = Day, Hour, Minute = Seq, Dataset
  ) %>%
  mutate(Dataset = "PEG", Camera_ID="peg") -> data.PEG

data.PEG %>%
  filter(Year == 2015) -> data.PEG.bigger

bind_rows(
  data.PEG.bigger %>%
  mutate(type="Manual Filter"),

  data.PEG.bigger %>%
  filter(L_mean > 10) %>%
#  filter(between(L_mean, 40, 60)) %>%
  mutate(type="L* Filter\n10 - 100"),

  data.PEG.bigger %>%
#  filter(L_mean > 10) %>%
  filter(between(L_mean, 40, 58)) %>%
  mutate(type="L* Filter\n40 - 60"),

  data.PEG.bigger %>%
  filter(between(Hour, 08, 16)) %>%
  mutate(type="Hour-based\nFilter")

) -> PEG.plot

PEG.plot %>%
  ggplot(aes(x=DOY, y=Gcc)) +
  geom_point(alpha=.2) +
  theme_bw(base_size=16) +
  theme(axis.title.x=element_blank()) +
  facet_grid(
#    Camera_ID~factor(type, levels=c("Original", "L* Filter", "Manual Filter"))
    Camera_ID~factor(type, levels=c("Manual Filter", "L* Filter\n10 - 100", "L* Filter\n40 - 60", "Hour-based\nFilter"))
#    Camera_ID~factor(type, levels=c("Original", "L* Filter"))
  ) -> gcc

PEG.plot %>%
  left_join(
    PEG.plot %>% 
      group_by(Camera_ID, type) %>% 
      count(n()) %>% 
      select(number_of_images = n)
   ) -> PEG.plot

gcc +
#  ylim(0.2, 0.8) + 
  geom_label( 
    data= PEG.plot %>% group_by(Camera_ID, type) %>% slice(1), 
    aes(x=310, y=0.364, label=number_of_images),
    label.padding = unit(0.08, "lines"),
    size = 3.5 
  ) -> gcc

PEG.plot %>%
  rowwise() %>%
  filter(
    Minute %in% c(1, 4) 
  ) %>%
  mutate(Minute = if_else(Minute == 1, 0.00, 0.5)) %>%
  mutate(Hour = Hour + Minute) %>%
  ungroup() -> PEG.plot 

r <- (PEG.plot$r_mean / 256)
g <- (PEG.plot$g_mean / 256)
b <- (PEG.plot$b_mean / 256)

PEG.plot %>%
  ggplot() +
  geom_tile(aes(x=DOY, y=Hour), fill=rgb(r, g, b), color=rgb(r, g, b)) + 
  theme_bw(base_size=16) +
  theme(legend.position = "none") +  
  ylim(5, 20) + 
  facet_grid(
#    Camera_ID~factor(type, levels=c("Original", "L* Filter", "Manual Filter"))
    Camera_ID~factor(type, levels=c("Manual Filter", "L* Filter\n10 - 100", "L* Filter\n40 - 60", "Hour-based\nFilter"))
  ) -> map

p <- gcc / map

ggsave(
  "PEG-filters.png",
  plot = p,
  path = "./images/",
#  scale = 1,
  width = 7,
  height = 6)
#+END_SRC

*** Figure 12 ()

#+BEGIN_SRC R :tangle section-3/figure-12.R
#!/usr/bin/Rscript

options(crayon.enabled = FALSE)
library(tidyverse)
library(arrow)
library(patchwork)

cam <- "f02_u"
#cam <- "t24_d"

min <- 0
if(cam == "t24_d"){
  min <- 0
}else{
  min <- 20
}

read_parquet("../data/data_AHS_adj.parquet") %>%
  as_tibble() -> data.AHS.adj

data.AHS.adj %>%
  rename(DOY = doy) %>%
  filter(Camera_ID == cam) %>%
  filter(Minute == min) %>%
  mutate(outlier = if_else(type == "to_adjust", TRUE, FALSE)) %>%
  mutate(alpha = if_else(outlier, 0.0, 1.0)) -> map.df

#  rowwise() %>%
#  filter(
#    (Camera_ID == "f02_u" && (Minute %in% c(20)) ) ||
#    (Camera_ID == "t24_d" && (Minute %in% c( 0))  )
#  ) %>%
#  ungroup() -> AHS.pAlot 

r <- (map.df$r_mean / 256)
g <- (map.df$g_mean / 256)
b <- (map.df$b_mean / 256)
alp <- (map.df$alpha)

map.df -> map.df2

map.df2 %>% filter(outlier == TRUE) -> map.df_outliers
map.df2 %>% filter(outlier == FALSE) -> map.df_non_outliers

r <- (map.df_non_outliers$r_mean / 256)
g <- (map.df_non_outliers$g_mean / 256)
b <- (map.df_non_outliers$b_mean / 256)
alp <- (map.df_non_outliers$alpha)

ggplot() +
  geom_tile(data=map.df_outliers, aes(x=DOY, y=Hour, fill=outlier, color=outlier)) + 
  geom_tile(data=map.df_non_outliers, aes(x=DOY, y=Hour), fill=rgb(r, g, b), color=rgb(r, g, b)) + 
  theme_bw(base_size=16) +
  theme(
    legend.position = "none",
    panel.spacing=unit(0.4, "lines"),
    panel.margin=unit(0.4, "lines"),
    panel.grid.major = element_blank(), 
    panel.grid.minor = element_blank()
  ) +
  scale_x_continuous(expand = c(0, 0)) +
  scale_y_continuous(expand = c(0, 0)) +
  facet_grid(run.window~run.level, scale="free") -> p 

map.df %>%
  left_join(
    map.df %>% 
      group_by(Camera_ID, type) %>% 
      count(n()) %>% 
      select(number_of_images = n)
   ) -> AHS.plot

map.df %>% 
  group_by(run.window, run.level, outlier) %>% 
  mutate(n_images = n()) %>% 
  select(n_images, outlier) %>% 
  distinct() -> labels

p +
#  ylim(4.6, 24) + 
  geom_label( 
    data= labels %>% filter(outlier == TRUE),
    aes(x=318, y=20, label=n_images),
#    aes(x=46, y=20, label=n_images),
    label.padding = unit(0.08, "lines"),
    color = "red3",
    size = 4.8 
  ) -> p

ggsave(
  "AHS-color-map.png",
  plot = p,
  path = "./images/",
#  scale = 1,
  width = 18,
  height = 8)
#+END_SRC

*** Figure 13 ()

#+BEGIN_SRC R :tangle section-3/figure-13.R
#!/usr/bin/Rscript

options(crayon.enabled = FALSE)
library(tidyverse)
library(arrow)
library(patchwork)

read_parquet("../data/data_AHS_adj_lstar.parquet") %>%
  as_tibble() -> data.AHS.adj.lstar

cam <- "f02_u"
#cam <- "t24_d"

min <- 0
if(cam == "t24_d"){
  min <- 0
}else{
  min <- 20
}

data.AHS.adj.lstar %>%
  rename(DOY = doy) %>%
  filter(Camera_ID == cam) %>%
  filter(Minute == min) %>%
  mutate(outlier = if_else(type == "to_adjust", TRUE, FALSE)) %>%
  mutate(alpha = if_else(outlier, 0.0, 1.0)) -> map.df

r <- (map.df$r_mean / 256)
g <- (map.df$g_mean / 256)
b <- (map.df$b_mean / 256)
alp <- (map.df$alpha)

map.df -> map.df2

map.df2 %>% filter(outlier == TRUE) -> map.df_outliers
map.df2 %>% filter(outlier == FALSE) -> map.df_non_outliers

r <- (map.df_non_outliers$r_mean / 256)
g <- (map.df_non_outliers$g_mean / 256)
b <- (map.df_non_outliers$b_mean / 256)
alp <- (map.df_non_outliers$alpha)

ggplot() +
  geom_tile(data=map.df_outliers, aes(x=DOY, y=Hour, fill=outlier, color=outlier)) + 
  geom_tile(data=map.df_non_outliers, aes(x=DOY, y=Hour), fill=rgb(r, g, b), color=rgb(r, g, b)) + 
  theme_bw(base_size=16) +
  theme(
    legend.position = "none",
    panel.spacing=unit(0.4, "lines"),
    panel.margin=unit(0.4, "lines"),
    panel.grid.major = element_blank(), 
    panel.grid.minor = element_blank()
) +
  scale_x_continuous(expand = c(0, 0)) +
  scale_y_continuous(expand = c(0, 0)) +
  facet_grid(run.window~run.level, scale="free") -> p 

map.df %>% 
  group_by(run.window, run.level, outlier) %>% 
  mutate(n_images = n()) %>% 
  select(n_images, outlier) %>% 
  distinct() -> labels

p +
#  ylim(4.6, 24) + 
  geom_label( 
    data= labels %>% filter(outlier == TRUE),
    aes(x=318, y=19, label=n_images),
#    aes(x=46, y=20, label=n_images),
    label.padding = unit(0.08, "lines"),
    color = "red3",
    size = 4.8 
  ) -> p

ggsave(
  "AHS-color-map-with-lstar.png",
  plot = p,
  path = "./images/",
#  scale = 1,
  width = 18,
  height = 8)

#+END_SRC

*** Figure 14 ()

#+BEGIN_SRC R :tangle section-3/figure-14.R
#!/usr/bin/Rscript

options(crayon.enabled = FALSE)
library(tidyverse)
library(arrow)
library(patchwork)

#cam <- "f02_u"
cam <- "t24_d"

min <- 0
if(cam == "t24_d"){
  min <- 0
}else{
  min <- 20
}

read_parquet("../data/data_AHS_adj_lstar.parquet") %>%
  as_tibble() -> data.AHS.adj.lstar

data.AHS.adj.lstar %>%
  rename(DOY = doy) %>%
  filter(Camera_ID == cam) %>%
  filter(Minute == min) %>%
  filter(run.level == 0.1, run.window == 3) %>%
  mutate(run.level = "Color reference") %>%
  filter(DOY %in% seq(0,400, 5)) -> map.df

r <- (map.df$r_mean / 256)
g <- (map.df$g_mean / 256)
b <- (map.df$b_mean / 256)
alp <- (map.df$alpha)

ggplot() +
  geom_tile(data=map.df, aes(x=DOY, y=Hour), fill=rgb(r, g, b)) + 
  theme_bw(base_size=16) +
  theme(
    legend.position = "none",
    panel.spacing=unit(0.4, "lines"),
    panel.margin=unit(0.4, "lines"),
    panel.grid.major = element_blank(), 
    panel.grid.minor = element_blank()
) +
  scale_x_continuous(expand = c(0, 0)) +
  scale_y_continuous(expand = c(0, 0)) +
  facet_grid(~run.level, scale="free") -> original_colors

data.AHS.adj.lstar %>%
#data.AHS.adj %>%
#  filter(Hour <= 8) %>%
  filter(run.level %in% c(0.1, 0.5, 0.9)) %>%
  filter(run.window %in% c(3, 365)) %>%
  rename(DOY = doy) %>%
  filter(Camera_ID == cam) %>%
  filter(Minute == min) %>%
  mutate(outlier = if_else(type == "to_adjust", TRUE, FALSE)) %>%
  mutate(alpha = if_else(outlier, 0.0, 1.0)) -> map.df

bind_rows(
  map.df %>%
    filter(run.level == 0.1) %>%
    mutate(run.level = "Original colors"),

  map.df %>% 
    mutate(r_mean = if_else(outlier, R, r_mean)) %>%
    mutate(g_mean = if_else(outlier, G, g_mean)) %>%
    mutate(b_mean = if_else(outlier, B, b_mean)) %>%
    mutate(run.level = as.character(run.level))

) -> map.df

map.df %>%
    filter(run.level == "Original colors") %>%
    mutate(L = x, a = y, b = z) %>%
    select(run.window, run.level, Camera_ID, DOY, Hour, Minute, L, a, b) -> df.ref

map.df %>%
    filter(run.level != "Original colors") %>%
    mutate(L = ifelse(is.na(x.border), x, x.border),
           a = ifelse(is.na(y.border), y, y.border),
           b = ifelse(is.na(z.border), z, z.border)) %>%
    select(run.window, run.level, Camera_ID, DOY, Hour, Minute, L, a, b) -> df.temp0

df.temp0 %>%
    filter(run.level != "Original colors") %>%
    left_join(
        df.ref %>% select(-run.level, -run.window),
        by=c("Camera_ID", "DOY", "Hour", "Minute"),
        suffix = c(".level", ".ref")) %>%
    mutate(dE = sqrt((L.level - L.ref)^2 + (a.level - a.ref)^2 + (b.level - b.ref)^2)) %>%
    left_join(
        map.df %>%
        filter(run.level != "Original colors") %>%    
        select(run.level, run.window, Camera_ID, DOY, Hour, Minute, r_mean, g_mean, b_mean),
        by = c("run.window", "run.level", "Camera_ID", "DOY", "Hour", "Minute")
    ) %>%
    group_by(run.level, run.window, Camera_ID, DOY, Hour, Minute) -> df.temp1

df.temp1 %>%
    group_by(run.level, run.window, Camera_ID, DOY, Hour) %>%
    arrange(Minute) %>%
    slice(1) %>%
    ungroup %>%
#    filter(DOY %in% seq(1,400, 3)) %>%
    mutate(dE.alpha = dE/max(dE)) %>%
##    mutate(dE.alpha = if_else(dE.alpha <= 0.24, 0.00, dE.alpha)) %>%
    print -> df.temp2

df.temp2 %>% 
  filter(DOY %in% seq(0,400, 5)) -> df.temp3

#%>%
#  mutate(Hour = 1) -> df.temp3

r <- (df.temp3$r_mean / 256) 
g <- (df.temp3$g_mean / 256)
b <- (df.temp3$b_mean / 256)

#white <- 0
#r <- r + white
#g <- g + white
#b <- b + white

ggplot() +
#  geom_tile(data=df.temp3, aes(x=DOY, y=Hour), fill=rgb(r, g, b)) +
#  geom_tile(data=df.temp3, aes(x=DOY, y=Hour, alpha=dE.alpha), fill=rgb(r, g, b)) +
  geom_tile(data=df.temp3, aes(x=DOY, y=Hour, fill=dE)) +
  theme_bw(base_size=16) +
  theme(
    panel.spacing=unit(0.4, "lines"),
    panel.margin=unit(0.4, "lines"),
    panel.grid.major = element_blank(), 
    panel.grid.minor = element_blank()
) +
  scale_x_continuous(expand = c(0, 0)) +
  scale_y_continuous(expand = c(0, 0)) +
  facet_grid(run.window~run.level, scale="free") + #-> p#+
  labs(fill="Distance") +
  theme(
    plot.margin=unit(c(1,0.5,0.5,0.5),"cm"),
    legend.position = c(0.5, 1.25),
    legend.direction="horizontal",
#    legend.key.size = unit(0.5, 'cm'), #change legend key size
    legend.key.height = unit(0.2, 'cm'), #change legend key height
    legend.key.width = unit(1, 'cm'), #change legend key width
    legend.title = element_text(size=10), #change legend title font size
    legend.text = element_text(size=8)
  ) + 
  scale_fill_gradient(low = "white", high = "red", na.value = NA) -> p  

layout <- "
##BBBB
AABBBB
AABBBB
AABBBB
AABBBB
AABBBB
AABBBB
AABBBB
AABBBB
AABBBB
AABBBB
AABBBB
AABBBB
AABBBB
AABBBB
AABBBB
AABBBB
AABBBB
AABBBB
AABBBB
AABBBB
AABBBB
AABBBB
AABBBB
AABBBB
AABBBB
AABBBB
AABBBB
AABBBB
AABBBB
AABBBB
AABBBB
##BBBB
"
p <- original_colors + p + plot_layout(design = layout)

ggsave(
  "color-correction-distance.png",
  plot = p,
  path = "./images/",
#  scale = 1,
  width = 8,
  height = 4.5)


#+END_SRC
*** Figure 15 ()

#+BEGIN_SRC R :tangle section-3/figure-15.R
#!/usr/bin/Rscript

options(crayon.enabled = FALSE)
library(tidyverse)
library(arrow)
library(patchwork)

cam <- "t24_d"

min <- 0
if(cam == "t24_d"){
  min <- 0
}else{
  min <- 20
}

read_parquet("../data/data_AHS_adj_lstar.parquet") %>%
  as_tibble() -> data.AHS.adj.lstar

data.AHS.adj.lstar %>%
#data.AHS.adj %>%
#  filter(Hour <= 8) %>%
  filter(run.level %in% c(0.1, 0.5, 0.9)) %>%
  filter(run.window %in% c(3, 365)) %>%
  rename(DOY = doy) %>%
  filter(Camera_ID == cam) %>%
  filter(Minute == min) %>%
  mutate(outlier = if_else(type == "to_adjust", TRUE, FALSE)) %>%
  mutate(alpha = if_else(outlier, 0.0, 1.0)) -> map.df

bind_rows(
  map.df %>%
    filter(run.level == 0.1) %>%
    mutate(run.level = "Original colors"),

  map.df %>% 
    mutate(r_mean = if_else(outlier, R, r_mean)) %>%
    mutate(g_mean = if_else(outlier, G, g_mean)) %>%
    mutate(b_mean = if_else(outlier, B, b_mean)) %>%
    mutate(run.level = as.character(run.level))

) -> map.df

map.df %>%
    filter(run.level == "Original colors") %>%
    mutate(L = x, a = y, b = z) %>%
    select(run.window, run.level, Camera_ID, DOY, Hour, Minute, L, a, b) -> df.ref

map.df %>%
    filter(run.level != "Original colors") %>%
    mutate(L = ifelse(is.na(x.border), x, x.border),
           a = ifelse(is.na(y.border), y, y.border),
           b = ifelse(is.na(z.border), z, z.border)) %>%
    select(run.window, run.level, Camera_ID, DOY, Hour, Minute, L, a, b) -> df.temp0

df.temp0 %>%
    filter(run.level != "Original colors") %>%
    left_join(
        df.ref %>% select(-run.level, -run.window),
        by=c("Camera_ID", "DOY", "Hour", "Minute"),
        suffix = c(".level", ".ref")) %>%
    mutate(dE = sqrt((L.level - L.ref)^2 + (a.level - a.ref)^2 + (b.level - b.ref)^2)) %>%
    left_join(
        map.df %>%
        filter(run.level != "Original colors") %>%    
        select(run.level, run.window, Camera_ID, DOY, Hour, Minute, r_mean, g_mean, b_mean),
        by = c("run.window", "run.level", "Camera_ID", "DOY", "Hour", "Minute")
    ) %>%
    group_by(run.level, run.window, Camera_ID, DOY, Hour, Minute) -> df.temp1

df.temp1 %>%
    group_by(run.level, run.window, Camera_ID, DOY, Hour) %>%
    arrange(Minute) %>%
    slice(1) %>%
    ungroup %>%
#    filter(DOY %in% seq(1,400, 3)) %>%
    mutate(dE.alpha = dE/max(dE)) %>%
##    mutate(dE.alpha = if_else(dE.alpha <= 0.24, 0.00, dE.alpha)) %>%
    print -> df.temp2

data.AHS.adj.lstar %>%
  rename(DOY = doy) %>%
  filter(Camera_ID == cam) %>%
  filter(Minute == min) %>%
  filter(run.level == 0.1, run.window==3) %>%
  mutate(run.level = "Color reference") %>%
  filter(between(DOY, 0, 150)) %>%
  filter(Hour==5) %>%
  filter(DOY %in% seq(0,150, 3)) -> df.temp3

r <- (df.temp3$r_mean / 256) 
g <- (df.temp3$g_mean / 256)
b <- (df.temp3$b_mean / 256)

#white <- 0.05
#r <- r + white
#g <- g + white
#b <- b + white

ggplot() +
  geom_tile(data=df.temp3, aes(x=DOY, y=Hour), fill=rgb(r, g, b)) +
#  geom_tile(data=df.temp3, aes(x=DOY, y=Hour, alpha=dE.alpha), fill=rgb(r, g, b)) +
#  geom_tile(data=df.temp3, aes(x=DOY, y=Hour, fill=dE.alpha)) +
  theme_bw(base_size=16) +
  theme(
    panel.spacing=unit(0.4, "lines"),
    panel.margin=unit(0.4, "lines"),
    panel.grid.major = element_blank(), 
    panel.grid.minor = element_blank()
) +
  scale_x_continuous(expand = c(0, 0)) +
  scale_y_continuous(expand = c(0, 0), breaks=c(5), labels=c(5)) +
  theme(
    axis.title.x=element_blank(),
    axis.text.x=element_blank(),
    axis.ticks.x=element_blank()
  ) + 
  facet_grid(~run.level, scale="free") -> ref_colors

df.temp2 %>% 
  filter(between(DOY, 0, 150)) %>%
  filter(Hour==5) %>%
  filter(DOY %in% seq(0,150, 3)) -> df.temp3

#%>%
#  mutate(Hour = 1) -> df.temp3

r <- (df.temp3$r_mean / 256) 
g <- (df.temp3$g_mean / 256)
b <- (df.temp3$b_mean / 256)

#white <- 0.05
#r <- r + white
#g <- g + white
#b <- b + white

ggplot() +
  geom_tile(data=df.temp3, aes(x=DOY, y=Hour), fill=rgb(r, g, b)) +
#  geom_tile(data=df.temp3, aes(x=DOY, y=Hour, alpha=dE.alpha), fill=rgb(r, g, b)) +
#  geom_tile(data=df.temp3, aes(x=DOY, y=Hour, fill=dE.alpha)) +
  theme_bw(base_size=16) +
  theme(
    plot.margin=unit(c(0.1,1.6,0.1,0.5),"cm"),
    panel.spacing=unit(0.2, "lines"),
    panel.margin=unit(0.2, "lines"),
    panel.grid.major = element_blank(), 
    panel.grid.minor = element_blank()
) +
  scale_x_continuous(expand = c(0, 0)) +
  scale_y_continuous(expand = c(0, 0), breaks=c(5), labels=c(5)) +
  facet_grid(run.window~run.level, scale="free") -> p1

ggplot() +
#  geom_tile(data=df.temp3, aes(x=DOY, y=Hour), fill=rgb(r, g, b)) +
#  geom_tile(data=df.temp3, aes(x=DOY, y=Hour, alpha=dE.alpha), fill=rgb(r, g, b)) +
  geom_tile(data=df.temp3, aes(x=DOY, y=Hour, fill=dE)) +
  theme_bw(base_size=16) +
  theme(
    panel.spacing=unit(0.2, "lines"),
    panel.margin=unit(0.2, "lines"),
    panel.grid.major = element_blank(), 
    panel.grid.minor = element_blank()
) +
  scale_x_continuous(expand = c(0, 0), breaks=c(94, 110, 125, 140), labels=c(94, 110, 125, 140)) +
  scale_y_continuous(expand = c(0, 0), breaks=c(5), labels=c(5)) +
  facet_grid(run.window~run.level, scale="free") + #-> p#+
  labs(fill="Distance") +
  theme(
    plot.margin=unit(c(0.1,1.6,0.1,0.5),"cm"),
    legend.position = c(1.12 , 0.5),
    legend.direction="vertical",
#    legend.key.size = unit(0.5, 'cm'), #change legend key size
    legend.key.height = unit(0.5, 'cm'), #change legend key height
    legend.key.width = unit(0.5, 'cm'), #change legend key width
    legend.title = element_text(size=10), #change legend title font size
    legend.text = element_text(size=8)
  ) + 
  scale_fill_gradient(low = "white", high = "red", na.value = NA)-> p2  #+
#  theme(
#    strip.text.x = element_blank()
##    strip.text.y = element_blank()
#  ) -> p2  

ggplot() +
#  geom_tile(data=df.temp3, aes(x=DOY, y=Hour), fill=rgb(r, g, b)) +
#  geom_tile(data=df.temp3, aes(x=DOY, y=Hour, alpha=dE.alpha), fill=rgb(r, g, b)) +
  geom_point(data=df.temp3 %>% mutate(dE = if_else(is.na(dE), 0, dE)), aes(x=DOY, y=dE)) +
  geom_line(data=df.temp3 %>% mutate(dE = if_else(is.na(dE), 0, dE)), aes(x=DOY, y=dE)) +
  theme_bw(base_size=16) +
  theme(
    panel.spacing=unit(0.2, "lines"),
    panel.margin=unit(0.2, "lines"),
#    panel.grid.major = element_blank(), 
#    panel.grid.minor = element_blank()
) +
#  scale_x_continuous(breaks=c(94, 110, 125, 140), labels=c(94, 110, 125, 140)) +
#  scale_y_continuous(expand = c(0, 0), breaks=c(5), labels=c(5)) +
  ylim(-0.5, 31) + 
  facet_grid(run.window~run.level, scale="free") + #-> p#+
  labs(y="Distance") -> p3


layout <- "
A##
BBB
BBB
CCC
CCC
"
#p3 

p <- (
  (ref_colors + theme(    plot.margin=unit(c(0.1,0.2,0.1,0.0),"cm"))) /
#  ref_colors /
  ( p1 + 
    theme(
    axis.title.x=element_blank(),
    axis.text.x=element_blank(),
    axis.ticks.x=element_blank()
    )
  ) / p3  
) + plot_layout(design = layout)

ggsave(
  "color-correction-colors.png",
  plot = p,
  path = "./images/",
#  scale = 1,
  width = 8,
  height = 6)
#+END_SRC

*** Figure 16 ()

#+BEGIN_SRC R :tangle section-3/figure-16.R
#!/usr/bin/Rscript

options(crayon.enabled = FALSE)
library(tidyverse)
library(arrow)
library(patchwork)

p90_aggregation_simple <- function(df, window_size=5){

  df %>%
    arrange(Year, DOY) -> metrics.ordered

  df %>%
    select(Year, DOY) %>%
    distinct %>%
    arrange(Year, DOY) %>%
    slice(1:(tail(seq(1,n(), by=window_size), n=1)-1)) %>%
    mutate(order = rep(1:(n()/window_size), each=window_size)) -> df.center.order

  df %>%
    # Associate groups and filter out those pictures without a group
    left_join(df.center.order, by = c("Year", "DOY")) %>%
    filter(!is.na(order)) %>%
    group_by(order) %>%
    summarize(
        Year = min(Year),
        DOY = median(DOY), # this effectively gets the DOY in the center
        p90 = quantile(Gcc, probs=c(.90)), .groups="drop") %>%
    return()

}

p90_aggregation_complex <- function(df, window_size=5){

  add_order <- function(df){
    df %>%
      select(year, doy) %>%
      distinct -> df.dist

      if(nrow(df.dist) < window_size){
         #print("Agreggation error.")
         return(df %>% mutate(order = -1))
      }
      
      df.dist %>%
      slice(1:(tail(seq(1,n(), by=window_size), n=1)-1)) %>%
      mutate(order = rep(1:(n()/window_size), each=window_size)) %>%
      return()
  }

  df %>%
    select(year, doy, Camera_ID, run.level, run.window) %>%
    #distinct %>%
    arrange(year, doy) %>%
    group_by(Camera_ID, run.level, run.window) %>%
    group_modify(~ add_order(.x)) -> df.center.order

  if(nrow(df.center.order %>% filter(order == -1)) > 0){
    print("Aggregation error - window_size is greater than grouped nrows().")
    return(df)
  }

  #return(df.center.order)
  #print(df.center.order %>% as.data.frame)

  df %>%
    # Associate groups and filter out those pictures without a group
    left_join(df.center.order, by = c("year", "doy", "Camera_ID", "run.level", "run.window")) %>%
    filter(!is.na(order)) %>%
    group_by(order, run.level, run.window, Camera_ID) %>%
    summarize(
        .groups = "keep",
        year = min(year),
        doy = median(doy), # this effectively gets the doy in the center
        p90.gcc = quantile(Gcc_Bruna, probs=c(.90)),
        p90.merged.gcc = quantile(merged.Gcc, probs=c(.90)),
        p90.new.gcc = quantile(new.Gcc, probs=c(.90), na.rm = TRUE)) %>%
    ungroup() %>%
    return()

}

# AHS
read_parquet("../data/AHS_metrics-all.parquet") %>%
  as_tibble() %>%
  select(
    Picture.Path,
    Gcc = Gcc_Bruna, 
    L_mean, A_mean, B_mean,
    r_mean, g_mean, b_mean,
    Year, DOY = Day, Hour, Minute, Dataset,
    Camera_ID, Mask.Path
  ) %>%
  filter(between(Year, 2010, 2016))  -> data.AHS

# GDK
read_parquet("../data/GDK_metrics-all.parquet") %>%
  as_tibble() %>%
  select(
    Gcc = Gcc_Bruna, 
    L_mean, A_mean, B_mean,
    r_mean, g_mean, b_mean,
    Year, DOY = Day, Hour, Minute, Dataset,
    Camera_ID, Mask.Path
  ) -> data.GDK

# PEG
read_parquet("../data/dataset_PEG_stats_all_years.parquet") %>%
  as_tibble() %>%
  select(
    Gcc = Gcc_Bruna, 
    L_mean, A_mean, B_mean,
    r_mean, g_mean, b_mean,
    Year, DOY = Day, Hour, Minute = Seq, Dataset
  ) %>%
  mutate(Dataset = "PEG", Camera_ID="peg") -> data.PEG

data.AHS %>%
  filter(Year == 2011) -> data.AHS.bigger

data.GDK %>%
  filter(Year == 2009) -> data.GDK.bigger

data.PEG %>%
  filter(Year == 2015) -> data.PEG.bigger

data.AHS.bigger %>%
  filter(between(Hour, 8, 15)) %>%
  group_by(Camera_ID) %>%
  group_modify(~p90_aggregation_simple(.x)) %>%
  mutate(dataset = "AHS") %>%
  mutate(Type = "Hour-based filter") -> ahs

data.GDK.bigger %>%
  filter(between(Hour, 8, 15)) %>%
  group_by(Camera_ID) %>%
  group_modify(~p90_aggregation_simple(.x)) %>%
  mutate(dataset = "GDK") %>%
  mutate(Type = "Hour-based filter") -> gdk

data.PEG.bigger %>%
  filter(between(Hour, 8, 15)) %>%
  group_by(Camera_ID) %>%
  group_modify(~p90_aggregation_simple(.x)) %>%
  mutate(dataset = "PEG") %>%
  mutate(Type = "Hour-based filter") -> peg

read_parquet("../data/data_AHS_adj_lstar.parquet") %>%
  as_tibble() -> data.AHS.adj.lstar

read_parquet("../data/data_GDK_adj_lstar.parquet") %>%
  as_tibble() -> data.GDK.adj.lstar

read_parquet("../data/data_PEG_adj_lstar.parquet") %>%
  as_tibble() -> data.PEG.adj.lstar

data.AHS.adj.lstar %>%
  p90_aggregation_complex() -> data.AHS.bigger.p90.lstar

data.PEG.adj.lstar %>%
  p90_aggregation_complex() -> data.PEG.bigger.p90.lstar

data.GDK.adj.lstar %>%
  p90_aggregation_complex() -> data.GDK.bigger.p90.lstar

bind_rows(

ahs %>% 
  mutate(run.level = 0.1), 
ahs %>% 
  mutate(run.level = 0.5), 
ahs %>% 
  mutate(run.level = 0.9), 

gdk %>% 
  mutate(run.level = 0.1), 
gdk %>% 
  mutate(run.level = 0.5), 
gdk %>% 
  mutate(run.level = 0.9), 


peg %>% 
  mutate(run.level = 0.1), 
peg %>% 
  mutate(run.level = 0.5), 
peg %>% 
  mutate(run.level = 0.9), 


data.AHS.bigger.p90.lstar %>%
  select(doy, p90.merged.gcc, run.level, run.window, Camera_ID) %>%
  mutate(Code = paste(sprintf("%.2d", run.window), run.level, sep=" -- ")) %>%
  rename(p90 = p90.merged.gcc, DOY = doy) %>%
  filter(
    (run.window == 365 & run.level == 0.1) |
    (run.window == 3 & run.level == 0.1) |

    (run.window == 365 & run.level == 0.5) |
    (run.window == 3 & run.level == 0.5) |  

    (run.window == 365 & run.level == 0.9) |
    (run.window == 3 & run.level == 0.9) 
  ) %>%
  mutate(dataset = "AHS") %>%
  mutate(Type = if_else(run.window==3, "Local adjust", "Global adjust")) , #%>%

data.GDK.bigger.p90.lstar %>%
  select(doy, p90.merged.gcc, run.level, run.window, Camera_ID) %>%
  mutate(Code = paste(sprintf("%.2d", run.window), run.level, sep=" -- ")) %>%
  rename(p90 = p90.merged.gcc, DOY = doy) %>%
  filter(
    (run.window == 365 & run.level == 0.1) |
    (run.window == 3 & run.level == 0.1) |

    (run.window == 365 & run.level == 0.5) |
    (run.window == 3 & run.level == 0.5) |  

    (run.window == 365 & run.level == 0.9) |
    (run.window == 3 & run.level == 0.9) 
  ) %>%
  mutate(dataset = "GDK") %>%
  mutate(Type = if_else(run.window==3, "Local adjust", "Global adjust")) , #%>%

data.PEG.bigger.p90.lstar %>%
  select(doy, p90.merged.gcc, run.level, run.window, Camera_ID) %>%
  mutate(Code = paste(sprintf("%.2d", run.window), run.level, sep=" -- ")) %>%
  rename(p90 = p90.merged.gcc, DOY = doy) %>%
  filter(
    (run.window == 365 & run.level == 0.1) |
    (run.window == 3 & run.level == 0.1) |

    (run.window == 365 & run.level == 0.5) |
    (run.window == 3 & run.level == 0.5) |  

    (run.window == 365 & run.level == 0.9) |
    (run.window == 3 & run.level == 0.9) 
  ) %>%
  mutate(dataset = "PEG") %>%
  mutate(Type = if_else(run.window==3, "Local adjust", "Global adjust")) , #%>%


#  mutate(Type = if_else(run.window==3, paste0("Local (", run.level, ")"), paste0("Global (", run.level, ")"))) %>%
#  mutate(Type = paste("L/Adj", Code, sep=" - ")) %>%
#  select(-Code, -contains("run")),

) %>%
  mutate(dataset_cam = paste(dataset, Camera_ID, sep="\n")) %>%
    ggplot() +
#    ggplot(aes(x=DOY, y = p90, color=as.factor(Type))) +
    geom_line(aes(x=DOY, y = p90, color=as.factor(Type), linetype=as.factor(Type))) +
#    geom_line(aes(x=DOY, y = baseline), color="black") +
#    geom_line(alpha=0.7) +
#    geom_point(alpha=0.3) +
    theme_bw(base_size=16) +
    theme(legend.position = "top") +
    labs(color='Type:')  +
    xlab("DOY") + 
    ylab("Gcc P90") + 
#    theme(
#      legend.position = c(0.08, 0.85),
#      legend.key.size = unit(0.40, 'cm'),
#      legend.title = element_text(size=14), 
#      legend.text = element_text(size=13)
#    ) +
#    scale_color_brewer(palette="Set1", labels = c("Global (0.8)", "Local (0.8)", "Hour-based filter")) +
     scale_colour_manual(
       labels = c("Global adjust", "Local adjust", "Hour-based filter"),
       values = c("#E41A1C", "#377EB8", "black")
     ) + 
    scale_linetype_manual(
       labels = c("Global adjust", "Local adjust", "Hour-based filter"),
       values = c("solid", "solid", "dashed"), 
     ) +
#    scale_color_brewer(palette="Set1") +
    guides(linetype = FALSE) + 
    facet_grid(dataset_cam~run.level, scales="free_y") -> p
#    facet_wrap(~dataset_cam, ncol=3) -> p

p 

ggsave(
  "impacts-on-p90.png",
  plot = p,
  path = "./images/",
#  scale = 1,
  width = 15,
  height = 10)

#+END_SRC

